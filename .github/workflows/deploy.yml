name: Deploy to ECR

on:
 
  push:
    branches: [ image ]
    
  workflow_dispatch:

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

   
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      id: credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1
      continue-on-error: true

    - name: Checking out sonar
      id: sonar
      uses: actions/checkout@master
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true
  
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      continue-on-error: true

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: fromgitrepository
        IMAGE_TAG: latest
        COMMIT_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_TAG .
        docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
      continue-on-error: true
        
    - name: Publish SNS Topic
      uses: nothingalike/sns-publish-topic@v1.6
      with:
        MESSAGE: "--- Getting info about credentials: ${{ steps.credentials.outcome }}\n--- Scanning the code with SonarCloud: ${{ steps.sonar.outcome }}\n--- Logging to ECR: ${{ steps.login-ecr.outcome }}\n--- Building docker image: ${{ steps.build-image.outcome }}"
        TOPIC_ARN: "arn:aws:sns:eu-north-1:737473224894:piko-nebo-sns-topic"
      env:
        AWS_REGION: us-east-1
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Check on failures
      if: steps.credentials.outcome == 'failure' || steps.sonar.outcome == 'failure' || steps.login-ecr.outcome == 'failure' || steps.build-image.outcome == 'failure'
      run: |
        exit 1
